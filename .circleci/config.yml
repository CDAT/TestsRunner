version: 2

checkout:
  post:
    - ./ci-support/checkout_merge_commit.sh

aliases:
  - &setup_miniconda
    name: setup_miniconda
    command: |
      mkdir -p workspace
      git clone -b validateNightly git@github.com:CDAT/cdat workspace/cdat
      python workspace/cdat/scripts/install_miniconda.py -w $WORKDIR -p 'py3'

  - &create_conda_env_ORIG
    name: create_conda_env_ORIG
    command: |
       export PATH=$WORKDIR/miniconda/bin:$PATH
       conda config --set always_yes yes --set changeps1 no
       conda update -y -q conda
       conda config --set anaconda_upload no
       conda create -q -n py2 -c cdat/label/nightly -c conda-forge -c cdat requests cdp flake8 nose python=2
       conda create -q -n py3 -c cdat/label/nightly -c conda-forge -c cdat requests cdp flake8 nose python=3 coverage coveralls

  - &create_conda_env
    name: create_conda_env
    command: |
       export PATH=$WORKDIR/miniconda/bin:$PATH
       conda config --set always_yes yes --set changeps1 no
       conda update -y -q conda
       conda config --set anaconda_upload no
       if [ $PY_VER = "py2" ]
       then
          conda create -q -n py2 -c cdat/label/nightly -c conda-forge -c cdat requests cdp flake8 nose python=2
       else
          conda create -q -n py3 -c cdat/label/nightly -c conda-forge -c cdat requests cdp flake8 nose python=3 coverage coveralls
       fi

  - &setup_testsrunner_ORIG
    name: setup_testsrunner_ORIG
    command: |
       export PATH=$WORKDIR/miniconda/bin:$PATH
       export UVCDAT_ANONYMOUS_LOG=False
       source activate py2
       python setup.py install
       source activate py3
       python setup.py install

  - &setup_testsrunner
    name: setup_testsrunner
    command: |
       export PATH=$WORKDIR/miniconda/bin:$PATH
       export UVCDAT_ANONYMOUS_LOG=False
       source activate $PY_VER
       python setup.py install


  - &run_tests_ORIG
    name: run_tests_ORIG
    command: |
       export PATH=$WORKDIR/miniconda/bin:$PATH
       export UVCDAT_ANONYMOUS_LOG=False
       export UVCDAT_SETUP_PATH=${HOME}
       source activate py2
       python run_tests.py -H -v2 -n 2
       RESULT=$?
       echo "*** py2 test result: "${RESULT} 
       source activate py3
       python run_tests.py -H -v2 -n 2 $COVERAGE
       PY3_RESULT=$?
       echo "**** py3 test result: "${PY3_RESULT}
       RESULT=$(( $RESULT + $PY3_RESULT))
       exit $RESULT


  - &run_tests
    name: run_tests
    command: |
       export PATH=$WORKDIR/miniconda/bin:$PATH
       export CDAT_ANONYMOUS_LOG=False
       export CDAT_SETUP_PATH=${HOME}
       source activate $PY_VER
       if [ $PY_VER = 'py2' ]
       then
          python run_tests.py -H -v2 -n 2
       else
          python run_tests.py -H -v2 -n 2 $COVERAGE
       fi
       RESULT=$?
       echo "*** $PY_VER test result: "${RESULT} 
       # exit $RESULT
       exit 1

  - &conda_upload
    name: conda_upload
    command: |
       if [[ $CIRCLE_BRANCH != 'add_coverage' ]]; then
          exit 0
       fi
       export PATH=${HOME}/project/$WORKDIR/miniconda/bin:$PATH
       conda install conda-build anaconda-client
       conda config --set anaconda_upload no
       export CONDA_BLD_PATH=`pwd`/conda_build
       git clone git://github.com/cdat/conda-recipes
       cd conda-recipes
       export PKG_NAME=testsrunner
       export USER=cdat
       export VERSION=8.0
       export LABEL=linatest
       python ./prep_for_build.py -l $VERSION -b 'add_coverage'
       conda build $PKG_NAME -c cdat/label/nightly -c conda-forge -c cdat --python=2.7
       conda build $PKG_NAME -c cdat/label/nightly -c conda-forge -c cdat --python=3.6
       anaconda -t $CONDA_UPLOAD_TOKEN upload -u $USER -l $LABEL $CONDA_BLD_PATH/$OS/$PKG_NAME-$VERSION.`date +%Y*`0.tar.bz2 --force

  - &run_coveralls
    name: run_coveralls
    command: |
       export PATH=$WORKDIR/miniconda/bin:$PATH
       source activate py3
       coveralls
       source deactivate

jobs:
  macos_testsrunner_py2:
    macos:
      xcode: "9.2.0"
    environment:
      WORKDIR: "workspace/test_macos_testsrunner"
      OS: "osx-64"
      PY_VER: "py2"
    steps:
      - checkout
      - run: *setup_miniconda
      - run: *create_conda_env
      - run: *setup_testsrunner
      - run: *run_tests
      - run: *conda_upload
      - store_artifacts:
          path: tests_html
          destination: tests_html
      - store_artifacts:
          path: tests_png
          destination: tests_png

  macos_testsrunner_py3:
    macos:
      xcode: "9.2.0"
    environment:
      WORKDIR: "workspace/test_macos_testsrunner"
      OS: "osx-64"
      PY_VER: "py3"
    steps:
      - checkout
      - run: *setup_miniconda
      - run: *create_conda_env
      - run: *setup_testsrunner
      - run: *run_tests
      - run: *conda_upload
      - store_artifacts:
          path: tests_html
          destination: tests_html
      - store_artifacts:
          path: tests_png
          destination: tests_png

  linux_testsrunner_py2:
    machine:
      image: circleci/classic:latest
    environment:
      WORKDIR: "workspace/test_linux_testsrunner"
      OS: "linux-64"
      PY_VER: "py2"
    steps:
      - checkout
      - run: *setup_miniconda
      - run: *create_conda_env
      - run: *setup_testsrunner
      - run: *run_tests
      - run: *conda_upload
      - store_artifacts:
          path: tests_html
          destination: tests_html
      - store_artifacts:
          path: tests_png
          destination: tests_png

  linux_testsrunner_py3:
    machine:
      image: circleci/classic:latest
    environment:
      WORKDIR: "workspace/test_linux_testsrunner"
      OS: "linux-64"
      PY_VER: "py3"
      COVERAGE: "-c tests/coverage.json"
    steps:
      - checkout
      - run: *setup_miniconda
      - run: *create_conda_env
      - run: *setup_testsrunner
      - run: *run_tests
      - run: *run_coveralls
      - run: *conda_upload
      - store_artifacts:
          path: tests_html
          destination: tests_html
      - store_artifacts:
          path: tests_png
          destination: tests_png

  linux_testsrunner_ORIG:
    machine:
      image: circleci/classic:latest
    environment:
      WORKDIR: "workspace/test_linux_testsrunner"
      OS: "linux-64"
      COVERAGE: "-c tests/coverage.json"
    steps:
      - checkout
      - run: *setup_miniconda
      - run: *create_conda_env
      - run: *setup_testsrunner
      - run: *run_tests
      - run: *run_coveralls
      - run: *conda_upload
      - store_artifacts:
          path: tests_html
          destination: tests_html
      - store_artifacts:
          path: tests_png
          destination: tests_png

workflows:
  version: 2
  testsrunner:
    jobs:
      - macos_testsrunner_py2
      - macos_testsrunner_py3:
           requires:
              - macos_testsrunner_py2
      - linux_testsrunner_py2
      - linux_testsrunner_py3:
           requires:
              - linux_testsrunner_py2

